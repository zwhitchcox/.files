#!/usr/bin/env bash

set -x
starts_with() {
  [[ $1 == $2 ]] || [[ $1 == $2* ]] || return 1
}

err_exit() {
  echo "$@" 1>&2
  exit 1
}


if [ -z "$1" ]; then
  echo "Select a project"
  dev $(get_selection $(recent_projects))
  return $?
fi

DEV_DIR=$(realpath "$DEV_DIR")
ENV_DIR=$(realpath "$DEV_DIR/$(get_env)")

strip_dev_dir() {
  local my_path=$(realpath $1)
  [[ $my_path/* == $DEV_DIR/* ]] && echo ${my_path:$((${#DEV_DIR}+1))} && return 0
  return 1
}

check_dirs() {
  for dir in $@; do 
    local p=$(realpath $dir)
    if [ -d $p ]; then
      project=$(strip_dev_dir $p)
      project_full=$p
      return 0
    fi
  done
  return 1
}

check_absolute() {
  if [[ $1 == .* ]] || [[ $1 == /* ]]; then
    p=$(realpath $1)
    project=$(strip_dev_dir $p)
    project_full=$p
    return 0
  fi
  return 1
}


check_absolute $1 || check_dirs $ENV_DIR/$1 $DEV_DIR/*/$1 $PWD/$1 || err_exit "not found"

# if not in dev dir, use absolute path
if ! [[ "$project" == /* ]]; then
  mkdir -p $HOME/.histories
  # give each project its own history
  hist_file=$HOME/.histories/.zsh_history_$(echo $project | sed 's/\//_/g')
  echo $project >> $DEV_HIST
fi

window_name="$(echo "$project" | sed 's/\./_/g')"
contains() {
  while read line; do 
    if [ "$line" == "$1" ]; then
      return 0
    fi
  done
  return 1
}


mkdir -p ${hist_file%/*}
if [ -z $TMUX ]; then
  session_name=$(tty)
  tmux new-session -d -c "$project_full" \
    -e "hist_file=$hist_file" \
    -e status_shown=false \
    -s "$session_name" \
    -n "$window_name"
  tmux send-keys -t "$session_name" " dev ." Enter
  tmux attach -t "$session_name"
else
  cur_sess=$(tmux display -p -F '#{session_id}')
  cur_win=$(tmux display -p -F '#{window_name}')
  windows=$(tmux list-windows -t $cur_sess -F '#{window_name}')
  if [ "$cur_win" == "$window_name" ]; then
    if [ -z $VIMRUNTIME ]; then
      $EDITOR "$project_full"
    elif [ "$project" == "$PWD" ]; then
      echo already on $window_name 1>&2
    else
      echo already on $window_name 1>&2 # can't cd, todo
    fi
  elif echo "$windows" |  contains "$window_name"; then
    tmux select-window -t $window_name
  else
    tmux new-window -d -c "$project_full" \
      -e "hist_file=$hist_file" \
      -e status_shown=false \
      -t "$cur_sess" \
      -n "$window_name"
    tmux select-window -t "$window_name"
    tmux send-keys -t "$window_name" " dev ." Enter
  fi
fi
