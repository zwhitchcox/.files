#!/usr/bin/env bash
starts_with() {
  [[ $1 == $2 ]] || [[ $1 == $2* ]] || return 1
}

cur_env=$(cat $ENV_FILE)
DEV_DIR=$(realpath "$DEV_DIR")
ENV_DIR=$(realpath "$DEV_DIR/$cur_env")

check_dir() {
  local dir="$1"
  local proj="$2"
  cd $dir || return 1
  local real=$(realpath "$dir/$proj") || return 1
  [[ -d "$real" ]] || return 1
  starts_with $real $dir || return 1
  echo $real
  return 0
}

find_project() {
  local x
  # look for relative path first if begins with . or /
  if echo $1 | grep -qE '^(\.|\/)'; then
    if ! x=$(realpath $1); then
      echo "Can't find $x"
      exit 1
    fi
  else
    # otherwise check other directories
    x=$(check_dir "$ENV_DIR" "$1") || x=$(check_dir "$DEV_DIR" "$1") || x=$(realpath $1)
  fi

  if starts_with "$x" "$DEV_DIR"; then
    echo ${x:$((${#DEV_DIR} + 1))}
  else
    echo $x
  fi
}

if [ -z "$1" ]; then
  echo "Select a project"
  dev $(get_selection $(list_projects))
  return $?
fi

project="$(find_project $1)"
if starts_with "$project" "/"; then
  project_full="$project"
else
  project_full="$DEV_DIR/$project"
fi

if [ ! -d "$project_full" ]; then
  if starts_with "$1" "/" || starts_with "$1" "."; then
    create_dir="$(realpath $1)"
  elif [ $1  != */* ]; then
    create_dir=$ENV_DIR/$1
  elif [ -d $DEV_DIR/${1%%/*} ]; then
    create_dir=$DEV_DIR/$1
  else
    create_dir=$ENV_DIR/$1
  fi
  if starts_with "$create_dir" "$DEV_DIR"; then
    short_dir=${create_dir:$((${#DEV_DIR} + 1))}
  else
    short_dir=$create_dir
  fi
  if getyn "Couldn't find project $1. Init project in $short_dir (Y/n)? "; then
    init_project $create_dir || exit 1
    dev $create_dir
  fi
  exit 1
fi

# if not in dev dir, use absolute path
if ! starts_with "$project" "/"; then
  # give each project its own history
  hist_file=$HOME/.histories/.zsh_history_$(echo $project | sed 's/\//_/g')
fi

window_name="$(echo "$project" | sed 's/\./_/g')"
contains() {
  while read line; do 
    if [ "$line" == "$1" ]; then
      return 0
    fi
  done
  return 1
}

mkdir -p ${hist_file%/*}
if [ -z $TMUX ]; then
  session_name=$(tty)
  tmux new-session -d -c "$project_full" \
    -e "hist_file=$hist_file" \
    -e status_shown=false \
    -s "$session_name" \
    -n "$window_name"
  tmux send-keys -t "$session_name" " dev ." Enter
  tmux attach -t "$session_name"
else
  cur_sess=$(tmux display -p -F '#{session_id}')
  cur_win=$(tmux display -p -F '#{window_name}')
  windows=$(tmux list-windows -t $cur_sess -F '#{window_name}')
  if [ "$cur_win" == "$window_name" ]; then
    if [ -z $VIMRUNTIME ]; then
      $EDITOR "$project_full"
    elif [ "$project" == "$PWD" ]; then
      echo already on $window_name
    else
      echo already on $window_name # can't cd, todo
    fi
  elif echo "$windows" |  contains "$window_name"; then
    tmux select-window -t $window_name
  else
    tmux new-window -d -c "$project_full" \
      -e "hist_file=$hist_file" \
      -e status_shown=false \
      -t "$cur_sess" \
      -n "$window_name"
    tmux select-window -t "$window_name"
    tmux send-keys -t "$window_name" " dev ." Enter
  fi
fi
